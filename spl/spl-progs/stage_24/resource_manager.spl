alias FunctionNum R1;
//breakpoint;

if(FunctionNum == 1)
then
	alias BufferNumber R2;
	alias CurrentPID R3;

	while(([BUFFER_TABLE + (BufferNumber * 4) + 2]) != -1)
	do
		[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + (CurrentPID * 16) + 5] = BufferNumber;
		backup;
		call MOD_5;
		restore;
	endwhile;

	[BUFFER_TABLE + (BufferNumber * 4) + 2] = CurrentPID;

	return;
endif;

if(FunctionNum == 2)
then
	alias BufferNumber R2;
	alias CurrentPID R3;

	if(([BUFFER_TABLE + (BufferNumber * 4) + 2]) != CurrentPID)
	then
		R0 = -1;
		return;
	endif;

	[BUFFER_TABLE + (BufferNumber * 4) + 2] = -1;
	multipush (R4,R5);
	R4 = 1;
	R5 = PROCESS_TABLE + 16;

	while(R4 < 16)
	do
		if(([R5 + 4] == WAIT_BUFFER) && ([R5 + 5] == BufferNumber))
		then
			[R5 + 4] = READY;
			[R5 + 5] = 0;
		endif;
		
		R4 = R4 + 1;
		R5 = R5 + 16;
	endwhile;

	multipop (R4,R5);

	return;
endif;

if(FunctionNum == 3)
then
	alias CurrentPID R2;
	while([DISK_STATUS_TABLE] == 1)
	do
		[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_DISK;
		backup;
		call MOD_5;
		restore;
	endwhile;

	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = CurrentPID;
	return;
endif;

if(FunctionNum == 4)
then
	alias InodeIndex R2;
	alias CurrentPID R3;

	while([FILE_STATUS_TABLE + (InodeIndex * 4)] != -1)
	do
		[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_FILE;
		[PROCESS_TABLE + (CurrentPID * 16) + 5] = InodeIndex;
		backup;
		call MOD_5;
		restore;
	endwhile;

	if([INODE_TABLE + (InodeIndex * 16) + 1] == -1)
	then
		R0 = -1;
		return;
	endif;

	[FILE_STATUS_TABLE + (InodeIndex * 4)] = CurrentPID;
	R0 = 0;

	return;
endif;

if(FunctionNum == 5)
then
	alias InodeIndex R2;
	alias CurrentPID R3;
	
	if([FILE_STATUS_TABLE + (InodeIndex * 4)] == CurrentPID) 
	then
		multipush (R4,R5);
		[FILE_STATUS_TABLE + (InodeIndex * 4)] = -1;

		R4 = 1;
		R5 = PROCESS_TABLE + 16;
		while(R4 < 16) 
		do
			if(([R5 + 4] == WAIT_FILE) && ([R5 + 5] == InodeIndex)) 
			then
				[R5 + 4] = READY;
				[R5 + 5] = 0;
			endif;

			R4 = R4 + 1;
			R5 = R5 + 16;
		endwhile;
		multipop (R4,R5);

		R0 = 0;
		return;
	
	else
		R0 = -1;
		return;
	endif;
endif;

if(FunctionNum == 6) 
then
	alias CurrentPID R2;
	R0 = -1;
	
	multipush (R3,R4);
	R3 = 0;	
	R4 = SEMAPHORE_TABLE;
	
	while(R3 < MAX_SEM_COUNT)
	do
		if(([R4 + 1]) == 0) 
		then
			R0 = R3;
			[R4] = -1;
			[R4 + 1] = 1;
			multipop (R3,R4);
			return;
		endif;

		R3 = R3 + 1;
		R4 = R4 + 4;
	endwhile;
	multipop (R3,R4);

	return;
	
endif;

if(FunctionNum == 7) 
then
	alias SEMID R2;
	alias CurrentPID R3;
	
	if([SEMAPHORE_TABLE + (4 * SEMID)] == CurrentPID) 
	then
		[SEMAPHORE_TABLE + (4 * SEMID)] = -1;

		multipush (R4,R5);
		R4 = 1;
		R5 = PROCESS_TABLE + 16;
		while(R4 < 16) 
		do
			if(([R5 + 4] == WAIT_SEMAPHORE) && ([R5 + 5] == SEMID)) 
			then
				[R5 + 4] = READY;
			endif;

			R4 = R4 + 1;
			R5 = R5 + 16;
		endwhile;
	endif;

	[SEMAPHORE_TABLE + (SEMID * 4) + 1] = [SEMAPHORE_TABLE + (SEMID * 4) + 1] - 1;
	return;
endif;

if(FunctionNum == 8)
then
	alias CurrentPID R2;
	while([TERMINAL_STATUS_TABLE] == 1)
	do
		[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_TERMINAL;
		backup;
		call MOD_5;
		restore;
	endwhile;

	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = CurrentPID;
	//breakpoint;
	return;
endif;

if(FunctionNum == 9)
then
	alias CurrentPID R2;
	if(CurrentPID != ([TERMINAL_STATUS_TABLE + 1]))
	then
		R0 = -1;
		return;
	endif;

	[TERMINAL_STATUS_TABLE] = 0;
	[PROCESS_TABLE + (CurrentPID * 16) + 4] = READY;
	R0 = 0;
	//breakpoint;
	return;
endif;