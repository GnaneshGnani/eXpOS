alias FuncNum R1;

if(FuncNum == 1)
then
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	
	while([SYSTEM_STATUS_TABLE + 2] == 0)
	do
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
		backup;
		call MOD_5;
		restore;
	endwhile;

	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

	R0 = 76;
	while(R0 < 128)
	do
		if([MEMORY_FREE_LIST + R0] == 0)
		then
			[MEMORY_FREE_LIST + R0] = 1;
			return;
		endif;
		R0 = R0 + 1;
	endwhile;

	return;
endif;

if(FuncNum == 2)
then
	alias PageNum R2;
	
	[MEMORY_FREE_LIST + PageNum] = [MEMORY_FREE_LIST + PageNum] - 1;
	if([MEMORY_FREE_LIST + PageNum] == 0)
	then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;

	R3 = 1;
	while(R3 < 16)
	do
		if([PROCESS_TABLE + (R3 * 16) + 4] == WAIT_MEM)
		then
			[PROCESS_TABLE + (R3 * 16) + 4] = READY;
		endif;
		R3 = R3 + 1;
	endwhile;
	//breakpoint;
	return;
endif;

if(FuncNum == 4)
then
	alias BlockNum R2;
	alias PID R3;

	[DISK_FREE_LIST + BlockNum] = [DISK_FREE_LIST + BlockNum] - 1;
	return;
endif;

if(FuncNum == 5)
then
	alias BlockNum R2;

	R3 = 1;
	while(R3 < 16)
	do
		R4 = 4;
		while(R4 < 8)
		do
			if(([DISK_MAP_TABLE + (R3 * 10) + R4] == BlockNum) && ([PAGE_TABLE_BASE + (R3 * 20) + (R4 * 2)] != -1))
			then
				R0 = [PAGE_TABLE_BASE + (R3 * 20) + (R4 * 2)];
				[MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1; 
				return;
			endif;
			R4 = R4 + 1;
		endwhile;
		R3 = R3 + 1;
	endwhile;

	multipush (R1,R2,R3);
	R1 = 1;
	call MOD_2;

	multipush (R0,R1,R2,R2);
	R4 = R2;
	R1 = 2;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = R0;
	call MOD_4;
	multipop (R0,R1,R2,R3);

	multipop (R1,R2,R3);

	breakpoint;

	return;
endif;

return;