alias FunctionNum R1;
alias CurrentPID R2;
//breakpoint;

if(FunctionNum == 1)
then
	alias PageNum R3;
	alias BlockNum R4;

	multipush (R0,R1,R2,R2,R3,R4);
	R1 = 3;
	R2 = CurrentPID;
	call MOD_0;
	multipop (R0,R1,R2,R2,R3,R4);

	[DISK_STATUS_TABLE + 1] = 1;
	[DISK_STATUS_TABLE + 2] = PageNum;
	[DISK_STATUS_TABLE + 3] = BlockNum;

	store(PageNum, BlockNum);
	[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_DISK;

	backup;
	call MOD_5;
	restore;
	
	return;
endif;

if(FunctionNum == 2)
then
	alias PageNum R3;
	alias BlockNum R4;

	multipush (R0,R1,R2,R2,R3,R4);
	R1 = 3;
	R2 = CurrentPID;
	call MOD_0;
	multipop (R0,R1,R2,R2,R3,R4);

	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = PageNum;
	[DISK_STATUS_TABLE + 3] = BlockNum;

	load(PageNum,BlockNum);
	[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_DISK;

	backup;
	call MOD_5;
	restore;
	
	return;
endif;

if(FunctionNum == 3)
then 

	//breakpoint;
	multipush (R0,R1,R2,R3);
	R1 = 8;
	R2 = CurrentPID;
	call MOD_0;
	multipop (R0,R1,R2,R3);
	
	print(R3);

	multipush (R0,R1,R2,R3);
	R1 = 9;
	R2 = CurrentPID;
	call MOD_0;
	multipop (R0,R1,R2,R3);
	
	return;
endif;

if(FunctionNum == 4)
then
	multipush (R0,R1,R2,R3);
	R1 = 8;
	R2 = CurrentPID;
	call MOD_0;
	multipop (R0,R1,R2,R3);
	//breakpoint;
	
	read;

	[PROCESS_TABLE + (CurrentPID * 16) + 4] = WAIT_TERMINAL;
	//breakpoint;

	backup;
	call MOD_5;
	restore;
	//breakpoint;
	
	[([PTBR + (2 * (R3 / 512))] * 512) + (R3 % 512)] = [PROCESS_TABLE + (CurrentPID * 16) + 8];
	//breakpoint;
	return;
endif;

return;